# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.2.4

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import ContractContainer
from eth_typing.evm import ChecksumAddress


PROJECT_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
BUILD_DIRECTORY = os.path.join(PROJECT_DIRECTORY, "build", "contracts")


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> str:
    return raw_value


def get_abi_json(abi_name: str) -> List[Dict[str, Any]]:
    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    abi_json = build.get("abi")
    if abi_json is None:
        raise ValueError(f"Could not find ABI definition in: {abi_full_path}")

    return abi_json


def contract_from_build(abi_name: str) -> ContractContainer:
    # This is workaround because brownie currently doesn't support loading the same project multiple
    # times. This causes problems when using multiple contracts from the same project in the same
    # python project.
    PROJECT = project.main.Project("moonworm", Path(PROJECT_DIRECTORY))

    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    return ContractContainer(PROJECT, build)


class PlayToken:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "PlayToken"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("PlayToken")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(
        self,
        implementation_address: ChecksumAddress,
        owner_address: ChecksumAddress,
        data: bytes,
        transaction_config,
    ):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(
            implementation_address, owner_address, data, transaction_config
        )
        self.address = deployed_contract.address
        self.contract = deployed_contract
        return deployed_contract.tx

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def owner(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.owner.call(block_identifier=block_number)

    def supports_interface(
        self, id: bytes, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.supportsInterface.call(id, block_identifier=block_number)

    def transfer_ownership(self, new_owner: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferOwnership(new_owner, transaction_config)

    def upgrade_to(
        self, new_implementation: ChecksumAddress, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.upgradeTo(new_implementation, transaction_config)

    def upgrade_to_and_call(
        self, new_implementation: ChecksumAddress, data: bytes, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.upgradeToAndCall(
            new_implementation, data, transaction_config
        )

    def domain_separator(
        self, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.DOMAIN_SEPARATOR.call(block_identifier=block_number)

    def allowance(
        self,
        owner: ChecksumAddress,
        spender: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.allowance.call(
            owner, spender, block_identifier=block_number
        )

    def approve(self, spender: ChecksumAddress, amount: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.approve(spender, amount, transaction_config)

    def approve_and_call(
        self, spender: ChecksumAddress, amount: int, data: bytes, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.approveAndCall(spender, amount, data, transaction_config)

    def balance_of(
        self, owner: ChecksumAddress, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.balanceOf.call(owner, block_identifier=block_number)

    def burn(self, to: ChecksumAddress, amount: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.burn(to, amount, transaction_config)

    def decimals(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.decimals(transaction_config)

    def distribute_along_with_eth(
        self, tos: List, total_amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.distributeAlongWithETH(
            tos, total_amount, transaction_config
        )

    def distribute_various_amounts_along_with_eth(
        self, tos: List, amounts: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.distributeVariousAmountsAlongWithETH(
            tos, amounts, transaction_config
        )

    def distribute_various_amounts_of_token_and_eth(
        self, tos: List, token_amounts: List, ether_amounts: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.distributeVariousAmountsOfTokenAndETH(
            tos, token_amounts, ether_amounts, transaction_config
        )

    def mint(self, to: ChecksumAddress, amount: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.mint(to, amount, transaction_config)

    def name(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.name(transaction_config)

    def nonces(
        self, owner: ChecksumAddress, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.nonces.call(owner, block_identifier=block_number)

    def num_tokens_per_native_token_at18_decimals(
        self, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.numTokensPerNativeTokenAt18Decimals.call(
            block_identifier=block_number
        )

    def pay_for_and_call(
        self,
        for_address: ChecksumAddress,
        to: ChecksumAddress,
        amount: int,
        data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.payForAndCall(
            for_address, to, amount, data, transaction_config
        )

    def permit(
        self,
        owner: ChecksumAddress,
        spender: ChecksumAddress,
        value: int,
        deadline: int,
        v: int,
        r: bytes,
        s: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.permit(
            owner, spender, value, deadline, v, r, s, transaction_config
        )

    def post_upgrade(self, arg1: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.postUpgrade(arg1, transaction_config)

    def symbol(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.symbol.call(block_identifier=block_number)

    def total_supply(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.totalSupply.call(block_identifier=block_number)

    def transfer(self, to: ChecksumAddress, amount: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transfer(to, amount, transaction_config)

    def transfer_along_with_eth(
        self, to: ChecksumAddress, amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferAlongWithETH(to, amount, transaction_config)

    def transfer_and_call(
        self, to: ChecksumAddress, amount: int, data: bytes, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferAndCall(to, amount, data, transaction_config)

    def transfer_from(
        self,
        from_: ChecksumAddress,
        to: ChecksumAddress,
        amount: int,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferFrom(from_, to, amount, transaction_config)

    def transfer_from_and_call(
        self,
        from_: ChecksumAddress,
        to: ChecksumAddress,
        amount: int,
        data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferFromAndCall(
            from_, to, amount, data, transaction_config
        )


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        parser.add_argument(
            "--block-number",
            required=False,
            type=int,
            help="Call at the given block number, defaults to latest",
        )
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )
    parser.add_argument(
        "--value", default=None, help="Value of the transaction in wei(optional)"
    )
    parser.add_argument("--verbose", action="store_true", help="Print verbose output")


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = PlayToken(None)
    result = contract.deploy(
        implementation_address=args.implementation_address,
        owner_address=args.owner_address,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.verify_contract()
    print(result)


def handle_owner(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.owner(block_number=args.block_number)
    print(result)


def handle_supports_interface(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.supports_interface(id=args.id, block_number=args.block_number)
    print(result)


def handle_transfer_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_ownership(
        new_owner=args.new_owner, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_upgrade_to(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.upgrade_to(
        new_implementation=args.new_implementation,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_upgrade_to_and_call(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.upgrade_to_and_call(
        new_implementation=args.new_implementation,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_domain_separator(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.domain_separator(block_number=args.block_number)
    print(result)


def handle_allowance(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.allowance(
        owner=args.owner, spender=args.spender, block_number=args.block_number
    )
    print(result)


def handle_approve(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.approve(
        spender=args.spender, amount=args.amount, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_approve_and_call(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.approve_and_call(
        spender=args.spender,
        amount=args.amount,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_balance_of(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.balance_of(owner=args.owner, block_number=args.block_number)
    print(result)


def handle_burn(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.burn(
        to=args.to, amount=args.amount, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_decimals(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.decimals(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_distribute_along_with_eth(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.distribute_along_with_eth(
        tos=args.tos,
        total_amount=args.total_amount,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_distribute_various_amounts_along_with_eth(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.distribute_various_amounts_along_with_eth(
        tos=args.tos, amounts=args.amounts, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_distribute_various_amounts_of_token_and_eth(
    args: argparse.Namespace,
) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.distribute_various_amounts_of_token_and_eth(
        tos=args.tos,
        token_amounts=args.token_amounts,
        ether_amounts=args.ether_amounts,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_mint(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.mint(
        to=args.to, amount=args.amount, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_name(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.name(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_nonces(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.nonces(owner=args.owner, block_number=args.block_number)
    print(result)


def handle_num_tokens_per_native_token_at18_decimals(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.num_tokens_per_native_token_at18_decimals(
        block_number=args.block_number
    )
    print(result)


def handle_pay_for_and_call(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.pay_for_and_call(
        for_address=args.for_address,
        to=args.to,
        amount=args.amount,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_permit(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.permit(
        owner=args.owner,
        spender=args.spender,
        value=args.value,
        deadline=args.deadline,
        v=args.v,
        r=args.r,
        s=args.s,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_post_upgrade(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.post_upgrade(
        arg1=args.arg1, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_symbol(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.symbol(block_number=args.block_number)
    print(result)


def handle_total_supply(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    result = contract.total_supply(block_number=args.block_number)
    print(result)


def handle_transfer(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer(
        to=args.to, amount=args.amount, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_transfer_along_with_eth(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_along_with_eth(
        to=args.to, amount=args.amount, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_transfer_and_call(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_and_call(
        to=args.to,
        amount=args.amount,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_transfer_from(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_from(
        from_=args.from_arg,
        to=args.to,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_transfer_from_and_call(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = PlayToken(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_from_and_call(
        from_=args.from_arg,
        to=args.to,
        amount=args.amount,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for PlayToken")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.add_argument(
        "--implementation-address", required=True, help="Type: address"
    )
    deploy_parser.add_argument("--owner-address", required=True, help="Type: address")
    deploy_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    owner_parser = subcommands.add_parser("owner")
    add_default_arguments(owner_parser, False)
    owner_parser.set_defaults(func=handle_owner)

    supports_interface_parser = subcommands.add_parser("supports-interface")
    add_default_arguments(supports_interface_parser, False)
    supports_interface_parser.add_argument(
        "--id", required=True, help="Type: bytes4", type=bytes_argument_type
    )
    supports_interface_parser.set_defaults(func=handle_supports_interface)

    transfer_ownership_parser = subcommands.add_parser("transfer-ownership")
    add_default_arguments(transfer_ownership_parser, True)
    transfer_ownership_parser.add_argument(
        "--new-owner", required=True, help="Type: address"
    )
    transfer_ownership_parser.set_defaults(func=handle_transfer_ownership)

    upgrade_to_parser = subcommands.add_parser("upgrade-to")
    add_default_arguments(upgrade_to_parser, True)
    upgrade_to_parser.add_argument(
        "--new-implementation", required=True, help="Type: address"
    )
    upgrade_to_parser.set_defaults(func=handle_upgrade_to)

    upgrade_to_and_call_parser = subcommands.add_parser("upgrade-to-and-call")
    add_default_arguments(upgrade_to_and_call_parser, True)
    upgrade_to_and_call_parser.add_argument(
        "--new-implementation", required=True, help="Type: address"
    )
    upgrade_to_and_call_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    upgrade_to_and_call_parser.set_defaults(func=handle_upgrade_to_and_call)

    domain_separator_parser = subcommands.add_parser("domain-separator")
    add_default_arguments(domain_separator_parser, False)
    domain_separator_parser.set_defaults(func=handle_domain_separator)

    allowance_parser = subcommands.add_parser("allowance")
    add_default_arguments(allowance_parser, False)
    allowance_parser.add_argument("--owner", required=True, help="Type: address")
    allowance_parser.add_argument("--spender", required=True, help="Type: address")
    allowance_parser.set_defaults(func=handle_allowance)

    approve_parser = subcommands.add_parser("approve")
    add_default_arguments(approve_parser, True)
    approve_parser.add_argument("--spender", required=True, help="Type: address")
    approve_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    approve_parser.set_defaults(func=handle_approve)

    approve_and_call_parser = subcommands.add_parser("approve-and-call")
    add_default_arguments(approve_and_call_parser, True)
    approve_and_call_parser.add_argument(
        "--spender", required=True, help="Type: address"
    )
    approve_and_call_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    approve_and_call_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    approve_and_call_parser.set_defaults(func=handle_approve_and_call)

    balance_of_parser = subcommands.add_parser("balance-of")
    add_default_arguments(balance_of_parser, False)
    balance_of_parser.add_argument("--owner", required=True, help="Type: address")
    balance_of_parser.set_defaults(func=handle_balance_of)

    burn_parser = subcommands.add_parser("burn")
    add_default_arguments(burn_parser, True)
    burn_parser.add_argument("--to", required=True, help="Type: address")
    burn_parser.add_argument("--amount", required=True, help="Type: uint256", type=int)
    burn_parser.set_defaults(func=handle_burn)

    decimals_parser = subcommands.add_parser("decimals")
    add_default_arguments(decimals_parser, True)
    decimals_parser.set_defaults(func=handle_decimals)

    distribute_along_with_eth_parser = subcommands.add_parser(
        "distribute-along-with-eth"
    )
    add_default_arguments(distribute_along_with_eth_parser, True)
    distribute_along_with_eth_parser.add_argument(
        "--tos", required=True, help="Type: address[]", nargs="+"
    )
    distribute_along_with_eth_parser.add_argument(
        "--total-amount", required=True, help="Type: uint256", type=int
    )
    distribute_along_with_eth_parser.set_defaults(func=handle_distribute_along_with_eth)

    distribute_various_amounts_along_with_eth_parser = subcommands.add_parser(
        "distribute-various-amounts-along-with-eth"
    )
    add_default_arguments(distribute_various_amounts_along_with_eth_parser, True)
    distribute_various_amounts_along_with_eth_parser.add_argument(
        "--tos", required=True, help="Type: address[]", nargs="+"
    )
    distribute_various_amounts_along_with_eth_parser.add_argument(
        "--amounts", required=True, help="Type: uint256[]", nargs="+"
    )
    distribute_various_amounts_along_with_eth_parser.set_defaults(
        func=handle_distribute_various_amounts_along_with_eth
    )

    distribute_various_amounts_of_token_and_eth_parser = subcommands.add_parser(
        "distribute-various-amounts-of-token-and-eth"
    )
    add_default_arguments(distribute_various_amounts_of_token_and_eth_parser, True)
    distribute_various_amounts_of_token_and_eth_parser.add_argument(
        "--tos", required=True, help="Type: address[]", nargs="+"
    )
    distribute_various_amounts_of_token_and_eth_parser.add_argument(
        "--token-amounts", required=True, help="Type: uint256[]", nargs="+"
    )
    distribute_various_amounts_of_token_and_eth_parser.add_argument(
        "--ether-amounts", required=True, help="Type: uint256[]", nargs="+"
    )
    distribute_various_amounts_of_token_and_eth_parser.set_defaults(
        func=handle_distribute_various_amounts_of_token_and_eth
    )

    mint_parser = subcommands.add_parser("mint")
    add_default_arguments(mint_parser, True)
    mint_parser.add_argument("--to", required=True, help="Type: address")
    mint_parser.add_argument("--amount", required=True, help="Type: uint256", type=int)
    mint_parser.set_defaults(func=handle_mint)

    name_parser = subcommands.add_parser("name")
    add_default_arguments(name_parser, True)
    name_parser.set_defaults(func=handle_name)

    nonces_parser = subcommands.add_parser("nonces")
    add_default_arguments(nonces_parser, False)
    nonces_parser.add_argument("--owner", required=True, help="Type: address")
    nonces_parser.set_defaults(func=handle_nonces)

    num_tokens_per_native_token_at18_decimals_parser = subcommands.add_parser(
        "num-tokens-per-native-token-at18-decimals"
    )
    add_default_arguments(num_tokens_per_native_token_at18_decimals_parser, False)
    num_tokens_per_native_token_at18_decimals_parser.set_defaults(
        func=handle_num_tokens_per_native_token_at18_decimals
    )

    pay_for_and_call_parser = subcommands.add_parser("pay-for-and-call")
    add_default_arguments(pay_for_and_call_parser, True)
    pay_for_and_call_parser.add_argument(
        "--for-address", required=True, help="Type: address"
    )
    pay_for_and_call_parser.add_argument("--to", required=True, help="Type: address")
    pay_for_and_call_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    pay_for_and_call_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    pay_for_and_call_parser.set_defaults(func=handle_pay_for_and_call)

    permit_parser = subcommands.add_parser("permit")
    add_default_arguments(permit_parser, True)
    permit_parser.add_argument("--owner", required=True, help="Type: address")
    permit_parser.add_argument("--spender", required=True, help="Type: address")
    permit_parser.add_argument("--value_permit", required=True, help="Type: uint256", type=int)
    permit_parser.add_argument(
        "--deadline", required=True, help="Type: uint256", type=int
    )
    permit_parser.add_argument("--v", required=True, help="Type: uint8", type=int)
    permit_parser.add_argument(
        "--r", required=True, help="Type: bytes32", type=bytes_argument_type
    )
    permit_parser.add_argument(
        "--s", required=True, help="Type: bytes32", type=bytes_argument_type
    )
    permit_parser.set_defaults(func=handle_permit)

    post_upgrade_parser = subcommands.add_parser("post-upgrade")
    add_default_arguments(post_upgrade_parser, True)
    post_upgrade_parser.add_argument(
        "--arg1", required=True, help="Type: uint256", type=int
    )
    post_upgrade_parser.set_defaults(func=handle_post_upgrade)

    symbol_parser = subcommands.add_parser("symbol")
    add_default_arguments(symbol_parser, False)
    symbol_parser.set_defaults(func=handle_symbol)

    total_supply_parser = subcommands.add_parser("total-supply")
    add_default_arguments(total_supply_parser, False)
    total_supply_parser.set_defaults(func=handle_total_supply)

    transfer_parser = subcommands.add_parser("transfer")
    add_default_arguments(transfer_parser, True)
    transfer_parser.add_argument("--to", required=True, help="Type: address")
    transfer_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    transfer_parser.set_defaults(func=handle_transfer)

    transfer_along_with_eth_parser = subcommands.add_parser("transfer-along-with-eth")
    add_default_arguments(transfer_along_with_eth_parser, True)
    transfer_along_with_eth_parser.add_argument(
        "--to", required=True, help="Type: address"
    )
    transfer_along_with_eth_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    transfer_along_with_eth_parser.set_defaults(func=handle_transfer_along_with_eth)

    transfer_and_call_parser = subcommands.add_parser("transfer-and-call")
    add_default_arguments(transfer_and_call_parser, True)
    transfer_and_call_parser.add_argument("--to", required=True, help="Type: address")
    transfer_and_call_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    transfer_and_call_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    transfer_and_call_parser.set_defaults(func=handle_transfer_and_call)

    transfer_from_parser = subcommands.add_parser("transfer-from")
    add_default_arguments(transfer_from_parser, True)
    transfer_from_parser.add_argument("--from-arg", required=True, help="Type: address")
    transfer_from_parser.add_argument("--to", required=True, help="Type: address")
    transfer_from_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    transfer_from_parser.set_defaults(func=handle_transfer_from)

    transfer_from_and_call_parser = subcommands.add_parser("transfer-from-and-call")
    add_default_arguments(transfer_from_and_call_parser, True)
    transfer_from_and_call_parser.add_argument(
        "--from-arg", required=True, help="Type: address"
    )
    transfer_from_and_call_parser.add_argument(
        "--to", required=True, help="Type: address"
    )
    transfer_from_and_call_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    transfer_from_and_call_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    transfer_from_and_call_parser.set_defaults(func=handle_transfer_from_and_call)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
